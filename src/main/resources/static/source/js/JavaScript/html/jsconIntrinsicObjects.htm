<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>内部对象</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>JScript&nbsp;</TD>
<TD class="bannerright" nowrap><a href="../html-vss/jsTOC.htm">语言参考</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H1><A NAME="jsconintrinsicobjects"></A>内部对象</H1>

<P>Microsoft Jscript 提供了 11 个内部（或“内置”）对象。它们是<B>Array</B>、<B>Boolean</B>、<B>Date</B>、<B>Function</B>、<B>Global</B>、<B>Math</B>、<B>Number</B>、<B>Object</B>、<B>RegExp</B>、<B>Error</B> 以及 <B>String</B> 对象。每一个对象有相关的方法和属性，这在<A HREF="jslrfjscriptlanguagereference.htm">语言参考</A>中有详细的描述。本节中也描述了某些对象。</P>

<H2>Array 对象</H2>

<P>数组下标可以被认为是对象的属性，它是通过数字索引来引用的。注意添加到数组中的已命名的属性不能通过数字来索引；它们是与数组元素分离的。</P>

<P>使用 <B>new</B> 运算符和 <B>Array() </B><A HREF="jsproconstructor.htm">构造器</A> 生成一个新的数组，如下面的示例。</P>

<PRE><CODE>var theMonths = new Array(12);
theMonths[0] = "Jan";
theMonths[1] = "Feb";
theMonths[2] = "Mar";
theMonths[3] = "Apr";
theMonths[4] = "May";
theMonths[5] = "Jun";
theMonths[6] = "Jul";
theMonths[7] = "Aug";
theMonths[8] = "Sep";
theMonths[9] = "Oct";
theMonths[10] = "Nov";
theMonths[11] = "Dec";</CODE></PRE>

<P>用关键字 <B>Array</B> 生成数组时，Jscript 包含了 <B>length</B> 属性，该属性记录了数组入口数。如果没有给该属性指定值，则设置长度为 0 且数组没有入口点。如果指定一个数值，则将长度设置为该数。如果指定了不止一个参数，则这些参数被用作数组的入口。另外，参数的数目被赋给 length 属性。如下面的示例与前一个示例是等价的。</P>

<PRE><CODE>var theMonths = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", 
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec");</CODE></PRE>

<P>当向用关键字 <B>Array</B> 生成的数组中添加元素时，Jscript 自动改变属性 <B>length</B> 的值。Jscript 中的数组索引总是以 0 开始，而不是 1，所以属性 length 通常比数组的最大索引大 1。</P>

<H2>String对象</H2>

<P>在 Jscript 中，可以将字符串（和数）当作对象来处理。<A HREF="jsobjstring.htm">string 对象</A> 有一些内置方法，可以和自己的字符串一起使用。其中一个是<A HREF="jsmthsubstring.htm">substring 方法</A>，它返回字符串的一部分。该方法以两个数字作为参数。</P>

<PRE><CODE>aString = "0123456789";
var aChunk = aString.substring(4, 7);  // </CODE>将<CODE> aChunk </CODE>设为<CODE> "456"</CODE>。
<CODE>var aNotherChunk = aString.substring(7, 4);  // </CODE>将<CODE> aNotherChunk </CODE>设为<CODE> "456"</CODE>。
<CODE>// </CODE>使用上面生成数组的示例：
<CODE>firstLetter = theMonths[5].substring(0,1);  // </CODE>将变量<CODE> firstLetter </CODE>设为“<CODE>J</CODE>”。</PRE>

<P><B>String</B> 对象的另一个属性是 <B>length</B> 属性。本属性包含了字符串中的字符数（空字符串为 0）。它是一个数值，可以直接在计算中使用。</P>

<PRE><CODE>var howLong = "Hello World".length  // </CODE>设置变量<CODE> howLong </CODE>为<CODE> 11</CODE>。</PRE>

<H2>Math 对象</H2>

<P><B>Math</B> 对象有许多预定义属性和方法。属性是特殊的数字。这些特殊的数字之一是 pi 值（近似 3.14159…）。这是 <B>Math.PI</B> 属性，如下例所示。</P>

<PRE><CODE>// </CODE>声明一个半径变量并赋数值。
<CODE>var circleArea = Math.PI * radius * radius;  // </CODE>注意<CODE> Math </CODE>和<CODE> PI </CODE>大写。</PRE>

<P><B>Math</B> 对象的一个内置方法是乘幂方法（或 <B>pow</B>），使用该方法求得指定数的幂次。下面的例子同时使用了 pi 和乘幂。</P>

<PRE><CODE>// </CODE>本公式计算给定半径的球体的体积。
<CODE>volume = (4/3)*(Math.PI*Math.pow(radius,3));</CODE></PRE>

<H2>Date 对象</H2>

<P><B>Date</B> 对象可以被用来表示任意的日期和时间，获取当前系统日期以及计算两个日期的间隔。它拥有一些预定义的属性和方法。通常，<B>Date</B> 对象给出星期；月份，天数和年份；以及以小时，分钟和秒表示的时间。该信息是基于 1970 年1 月 1 日 00:00:00.000 GMT 开始的毫秒数，其中 GMT 是格林威治标准时间（首选术语是 UTC，或者“全球标准时间”，它引用的信号是由“世界时间标准”发布的）。Jscript 可以处理 250,000 B.C. 到 255,000 A.D范围内的日期。</P>

<P>使用 <B>new</B> 运算符创建一个新的 <B>Date</B> 对象。下面的示例计算当年已过去的天数和今年剩下的天数。</P>

<PRE><CODE>/*
</CODE>本示例使用前面定义的月份名称数组。
第一条语句以“<CODE>Day Month Date 00:00:00 Year</CODE>”格式
对<CODE> thisIsToday </CODE>变量赋值。
<CODE>*/</CODE>
<CODE>var thisIsToday = new Date();</CODE>

<CODE>var toDay = new Date();  //</CODE>获取今天的日期。

<CODE>// </CODE>提取年，月，日。
<CODE>var thisYear = toDay.getFullYear();</CODE>
<CODE>var thisMonth = theMonths[toDay.getMonth()];</CODE>
<CODE>var thisDay = thisMonth  + " " + toDay.getDate() + ", " + thisYear;</CODE></PRE>

<H2>Number 对象</H2>

<P>除了 <B>Math</B> 对象中可用的特殊数值属性（例如 <B>PI</B>）外，在 Microsoft Jscript 中， <B>Number </B>对象有几个其他的数值属性。</P>

<TABLE border=1 cellspacing=0 cols=2 frame=box rules=all>

<TR VALIGN="top">
<TH width=31%>属性</TH>
<TH width=69%>描述</TH>
</TR>

<TR VALIGN="top">
<TD width=31%>MAX_VALUE</TD>
<TD width=69%>可能的最大数大约为 1.79E+308；可以是正数或负数。（具体数值随系统不同而有微小差别。）</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>MIN_VALUE</TD>
<TD width=69%>可能的最小数大约为 2.22E-308；可以是正数或负数。（具体数值随系统不同而有微小差别。）</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>NaN</TD>
<TD width=69%>特殊非数量值，“不是数值”。</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>POSITIVE_INFINITY</TD>
<TD width=69%>比最大正数（Number.MAX_VALUE）还要大的任意正值自动被转换为此值，代表正无穷大。</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>NEGATIVE_INFINITY</TD>
<TD width=69%>比最小的负数（负的 Number.MAX_VALUE）还小的任意值被自动转换为此值，代表负无穷。</TD>
</TR>
</TABLE><BR>

<P><B>Number.NaN</B> 是一个特殊的属性，被定义为“不是数值”。例如被 0 除返回 <B>NaN</B>。试图解析一个无法被解析为数字的字符串同样返回 <B>Number.NaN</B>。把 <B>NaN</B> 与任何数值或本身作比较的结果都是不相等。不能通过与 <B>Number.NaN</B> 比较来测试 <B>NaN</B> 结果，而应该使用 <B>isNaN()</B> 函数。</P>
<!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="jscopy.htm">&copy; 2000 Microsoft Corporation 版权所有。保留所有权利。使用规定。</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
