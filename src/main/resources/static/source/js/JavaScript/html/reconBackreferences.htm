<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>Backreferences</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>JScript&nbsp;</TD>
<TD class="bannerright" nowrap><a href="../html-vss/jsTOC.htm">语言参考</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H2><A NAME="reconbackreferences"></A>后向引用</H2>

<P>正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。请回想一下，对一个正则表达式模式或部分模式两边添加圆括号将导致这部分表达式存储到一个临时缓冲区中。可以使用非捕获元字符 '?:', '?=', or '?!' 来忽略对这部分正则表达式的保存。</P>

<P>所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容存储。存储子匹配的缓冲区编号从 1 开始，连续编号直至最大 99 个子表达式。每个缓冲区都可以使用 '\<I>n</I>' 访问，其中 <I>n</I> 为一个标识特定缓冲区的一位或两位十进制数。 </P>

<P>后向引用一个最简单，最有用的应用是提供了确定文字中连续出现两个相同单词的位置的能力。请看下面的句子：</P>

<PRE><CODE>Is is the cost of of gasoline going up up?</CODE></PRE>

<P>根据所写内容，上面的句子明显存在单词多次重复的问题。如果能有一种方法无需查找每个单词的重复现象就能修改该句子就好了。下面的 JScript 正则表达式使用一个子表达式就可以实现这一功能。 </P>

<PRE><CODE>/\b([a-z]+) \1\b/gi</CODE></PRE>

<P>等价的 VBScript 表达式为：</P>

<PRE><CODE>"\b([a-z]+) \1\b"</CODE></PRE>

<P>在这个示例中，子表达式就是圆括号之间的每一项。所捕获的表达式包括一个或多个字母字符，即由'[a-z]+' 所指定的。该正则表达式的第二部分是对前面所捕获的子匹配的引用，也就是由附加表达式所匹配的第二次出现的单词。'\1'用来指定第一个子匹配。单词边界元字符确保只检测单独的单词。如果不这样，则诸如 "is issued" 或 "this is" 这样的短语都会被该表达式不正确地识别。 </P>

<P>在 JScript 表达式中，正则表达式后面的全局标志 ('g') 表示该表达式将用来在输入字符串中查找尽可能多的匹配。大小写敏感性由表达式结束处的大小写敏感性标记 ('i') 指定。多行标记指定可能出现在换行符的两端的潜在匹配。对 VBScript 而言，在表达式中不能设置各种标记，但必须使用 <B>RegExp</B> 对象的属性来显式设置。</P>

<P>使用上面所示的正则表达式，下面的 JScript 代码可以使用子匹配信息，在一个文字字符串中将连续出现两次的相同单词替换为一个相同的单词：</P>

<PRE><CODE>var ss = "Is is the cost of of gasoline going up up?.\n";
var re = /\b([a-z]+) \1\b/gim;       //</CODE>创建正则表达式样式<CODE>.
var rv = ss.replace(re,"$1");   //</CODE>用一个单词替代两个单词<CODE>.</CODE></PRE>

<P>最接近的等价&nbsp; VBScript 代码如下：</P>

<PRE><CODE>Dim ss, re, rv
ss = "Is is the cost of of gasoline going up up?." &amp; vbNewLine
Set re = New RegExp
re.Pattern = "\b([a-z]+) \1\b"
re.Global = True
re.IgnoreCase = True
re.MultiLine = True
rv = re.Replace(ss,"$1")</CODE></PRE>

<P>请注意在 VBScript 代码中，全局、大小写敏感性以及多行标记都是使用 <B>RegExp</B> 对象的适当属性来设置的。</P>

<P>在<B>replace</B> 方法中使用 <B>$1</B> 来引用所保存的第一个子匹配。如果有多个子匹配，则可以用 <B>$2</B>, <B>$3 </B>等继续引用。</P>

<P>后向引用的另一个用途是将一个通用资源指示符 (URI) 分解为组件部分。假定希望将下述的URI 分解为协议 (ftp, http, etc)，域名地址以及页面/路径：</P>

<PRE><U><CODE>http://msdn.microsoft.com:80/scripting/default.htm</CODE></U></PRE>

<P>下面的正则表达式可以提供这个功能。对 JScript，为：</P>

<PRE><CODE>/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</CODE></PRE>

<P>对 VBScript 为：</P>

<PRE><CODE>"(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)"</CODE></PRE>

<P>第一个附加子表达式是用来捕获该 web 地址的协议部分。该子表达式匹配位于一个冒号和两个正斜杠之前的任何单词。第二个附加子表达式捕获该地址的域名地址。该子表达式匹配不包括 '^'、 '/' 或 ':' 字符的任何字符序列。第三个附加子表达式捕获网站端口号码，如果指定了该端口号。该子表达式匹配后跟一个冒号的零或多个数字。最后，第四个附加子表达式捕获由该 web 地址指定的路径以及\或者页面信息。该子表达式匹配一个和多个除'#' 或空格之外的字符。</P>

<P>将该正则表达式应用于上面所示的 URI 后，子匹配包含下述内容：</P>

<P class=tl><B>RegExp.$1</B> 包含 "http"</P>
<P class=tl><B>RegExp.$2</B> 包含 "msdn.microsoft.com"</P>
<P class=tl><B>RegExp.$3</B> 包含 ":80"</P>
<P class=tl><B>RegExp.$4</B> 包含 "/scripting/default.htm"</P>
<P class=tl></P><!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="jscopy.htm">&copy; 2000 Microsoft Corporation 版权所有。保留所有权利。使用规定。</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
