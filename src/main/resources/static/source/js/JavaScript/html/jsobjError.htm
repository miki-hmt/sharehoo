<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>Error 对象</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>JScript&nbsp;</TD>
<TD class="bannerright" nowrap><a href="../html-vss/jsTOC.htm">语言参考</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H1><A NAME="jsobjerror"></A>Error 对象</H1>

<P>保存有关错误的信息。</P>

<P><CODE><B>var</B> newErrorObj = <B>new Error(<BR>
 &nbsp; <BR>
)</B></CODE><BR>
<CODE><B>var</B> newErrorObj = <B>new Error(<BR>
 &nbsp; </B><I>number</I></CODE><B><BR>
<CODE>)</CODE></B><BR>
<CODE><B>var</B> newErrorObj = <B>new Error(<BR>
 &nbsp; </B><I>number</I><B>,<BR>
 &nbsp; </B><I>description</I></CODE><B><BR>
<CODE>)</CODE></B></P>

<P><B>Error</B> 对象的<A HREF="glossary.htm#defconstructor">构造函数</A>语法有以下部分： </P>

<H4>参数</H4>

<P class=dt>number</P>

<P class=indent>与错误相联的数字值。如果省略则为零。</P>

<P class=dt>description</P>

<P class=indent>描述错误的简短字符串。如果省略则为空字符串。</P>

<H4>说明</H4>

<P>每当产生<A HREF="glossary.htm#defrterrjs">运行时错误</A>，就产生 <B>Error</B> 对象的一个实例以描述错误。该实例有两个固有属性保存错误的描述（<B>description</B> 属性）和错误号（<B>number</B> 属性）。</P>

<P>错误号是 32 位的值。高 16 位字是设备代码，而低字是实际的错误代码。</P>

<P><B>Error</B> 对象也可以用如上所示的语法显式创建，或用 <B>throw</B> 语句抛掉。在两种情况下，都可以添加选择的任何属性，以拓展 <B>Error</B> 对象的能力。</P>

<P>典型地，在 <B>try...catch</B> 语句中创建的局部<A HREF="glossary.htm#defvariablejs">变量</A>引用隐式创建的 <B>Error</B> 对象。因此，可以按选择的任何方法使用错误号和描述。</P>

<P>下面的例子演示了隐式创建 <B>Error</B> 对象的使用：</P>

<PRE><CODE>try
 { x = y                </CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<CODE>     // </CODE>产生错误。
}<CODE>catch(e){              </CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<CODE>     // </CODE>创建局部变量<CODE> e</CODE>。
<CODE>  response.write(<span class=cfe><B>e</B></span>)                  // </CODE>打印<CODE> "[object Error]".</CODE>
<CODE>  response.write(<span class=cfe><B>e</B></span>.number &amp; 0xFFFF)  // </CODE>打印<CODE> 5009</CODE>。
<CODE>  response.write(<span class=cfe><B>e</B></span>.description)      // </CODE>打印<CODE> "'y' is undefined".</CODE>
<CODE>}</CODE></PRE>

<H4>方法</H4>

<P><B>Error</B> 对象没有方法。</P>

<H4>属性</H4>

<P><A HREF="jsprodescription.htm">description 属性</A> | <A HREF="jspronumber.htm">number 属性</A></P>

<H4>要求</H4>

<P><A HREF="jsoriversioninformation.htm">版本 5</A></P>

<H4>请参阅</H4>

<P><A HREF="jsoprnew.htm">new 运算符</A> | <A HREF="jsstmthrow.htm">throw 语句</A> | <A HREF="jsstmtrycatch.htm">try...catch 语句</A> | <A HREF="jsstmvar.htm">var 语句</A></P>
<!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="jscopy.htm">&copy; 2000 Microsoft Corporation 版权所有。保留所有权利。使用规定。</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
