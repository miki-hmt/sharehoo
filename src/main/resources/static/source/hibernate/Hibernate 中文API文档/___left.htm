<html>
<head>
<link rel="StyleSheet" href="___dtree.css" type="text/css" />
<script type="text/javascript" src="___dtree.js"></script>
</head>
<body>
<!-- Generated by CHM Editor (http://www.chmeditor.com) -->
<div class="dtree">
<p><a href="javascript: d.openAll();">open all</a> | <a href="javascript: d.closeAll();">close all</a></p>
<script type="text/javascript"><!--
d = new dTree("d");
d.add(0,-1,"Hibernate 中文API文档.chm","");
d.add(1,0,"手册网","page_1.html");
d.add(2,0,"HIBERNATE - 符合Java习惯的关系数据库持久化","index.html");
d.add(3,2,"前言","pr01.html");
d.add(4,3,"翻译说明","pr01.html#preface-translate-comments-zh-cn");
d.add(5,3,"版权声明","pr01s02.html");
d.add(6,2,"Hibernate入门","ch01.html");
d.add(7,6,"前言","ch01.html#tutorial-intro");
d.add(8,6,"第一部分 － 第一个Hibernate应用程序","ch01s02.html");
d.add(9,8,"第一个class","ch01s02.html#tutorial-firstapp-firstclass");
d.add(10,8,"映射文件","ch01s02.html#tutorial-firstapp-mapping");
d.add(11,8,"Hibernate配置","ch01s02.html#tutorial-firstapp-configuration");
d.add(12,8,"用Ant构建","ch01s02.html#tutorial-firstapp-ant");
d.add(13,8,"启动和辅助类","ch01s02.html#tutorial-firstapp-helpers");
d.add(14,8,"加载并存储对象","ch01s02.html#tutorial-firstapp-workingpersistence");
d.add(15,6,"第二部分 － 关联映射","ch01s03.html");
d.add(16,15,"映射Person类","ch01s03.html#tutorial-associations-mappinguser");
d.add(17,15,"单向Set-based的关联","ch01s03.html#tutorial-associations-unidirset");
d.add(18,15,"使关联工作","ch01s03.html#tutorial-associations-working");
d.add(19,15,"值类型的集合","ch01s03.html#tutorial-associations-valuecollections");
d.add(20,15,"双向关联","ch01s03.html#tutorial-associations-bidirectional");
d.add(21,15,"使双向连起来","ch01s03.html#tutorial-associations-usingbidir");
d.add(22,6,"第三部分 - EventManager web应用程序","ch01s04.html");
d.add(23,22,"编写基本的servlet","ch01s04.html#tutorial-webapp-servlet");
d.add(24,22,"处理与渲染","ch01s04.html#tutorial-webapp-processing");
d.add(25,22,"部署与测试","ch01s04.html#tutorial-webapp-deploy");
d.add(26,6,"总结","ch01s05.html");
d.add(27,2,"体系结构(Architecture)","ch02.html");
d.add(28,27,"概况(Overview)","ch02.html#architecture-overview");
d.add(29,27,"实例状态","ch02s02.html");
d.add(30,27,"JMX整合","ch02s03.html");
d.add(31,27,"对JCA的支持","ch02s04.html");
d.add(32,27,"上下文相关的（Contextual）Session","ch02s05.html");
d.add(33,2,"配置","ch03.html");
d.add(34,33,"可编程的配置方式","ch03.html#configuration-programmatic");
d.add(35,33,"获得SessionFactory","ch03s02.html");
d.add(36,33,"JDBC连接","ch03s03.html");
d.add(37,33,"可选的配置属性","ch03s04.html");
d.add(38,37,"SQL方言","ch03s04.html#configuration-optional-dialects");
d.add(39,37,"外连接抓取(Outer Join Fetching)","ch03s04.html#configuration-optional-outerjoin");
d.add(40,37,"二进制流 (Binary Streams)","ch03s04.html#configuration-optional-binarystreams");
d.add(41,37,"二级缓存与查询缓存","ch03s04.html#configuration-optional-cacheprovider");
d.add(42,37,"查询语言中的替换","ch03s04.html#configuration-optional-querysubstitution");
d.add(43,37,"Hibernate的统计(statistics)机制","ch03s04.html#configuration-optional-statistics");
d.add(44,33,"日志","ch03s05.html");
d.add(45,33,"实现NamingStrategy","ch03s06.html");
d.add(46,33,"XML配置文件","ch03s07.html");
d.add(47,33,"J2EE应用程序服务器的集成","ch03s08.html");
d.add(48,47,"事务策略配置","ch03s08.html#configuration-optional-transactionstrategy");
d.add(49,47,"JNDI绑定的SessionFactory","ch03s08.html#configuration-optional-jndi");
d.add(50,47,"在JTA环境下使用Current Session context (当前session上下文)管理","ch03s08.html#configuration-j2ee-currentsession");
d.add(51,47,"JMX部署","ch03s08.html#configuration-j2ee-jmx");
d.add(52,2,"持久化类(Persistent Classes)","ch04.html");
d.add(53,52,"一个简单的POJO例子","ch04.html#persistent-classes-pojo");
d.add(54,53,"实现一个默认的（即无参数的）构造方法（constructor）","ch04.html#persistent-classes-pojo-constructor");
d.add(55,53,"提供一个标识属性（identifier property）（可选）","ch04.html#persistent-classes-pojo-identifier");
d.add(56,53,"使用非final的类 (可选)","ch04.html#persistent-classes-pojo-final");
d.add(57,53,"为持久化字段声明访问器(accessors)和是否可变的标志(mutators)(可选)","ch04.html#persistent-classes-pojo-accessors");
d.add(58,52,"实现继承（Inheritance）","ch04s02.html");
d.add(59,52,"实现equals()和hashCode()","ch04s03.html");
d.add(60,52,"动态模型(Dynamic models)","ch04s04.html");
d.add(61,52,"元组片断映射(Tuplizers)","ch04s05.html");
d.add(62,2,"对象/关系数据库映射基础(Basic O/R Mapping)","ch05.html");
d.add(63,62,"映射定义（Mapping declaration）","ch05.html#mapping-declaration");
d.add(64,63,"Doctype","ch05.html#mapping-declaration-doctype");
d.add(65,64,"EntityResolver","ch05.html#mapping-declaration-entity-resolution");
d.add(66,63,"hibernate-mapping","ch05.html#mapping-declaration-mapping");
d.add(67,63,"class","ch05.html#mapping-declaration-class");
d.add(68,63,"id","ch05.html#mapping-declaration-id");
d.add(69,68,"Generator","ch05.html#mapping-declaration-id-generator");
d.add(70,68,"高/低位算法（Hi/Lo Algorithm）","ch05.html#mapping-declaration-id-hilo");
d.add(71,68,"UUID算法（UUID Algorithm ）","ch05.html#mapping-declaration-id-uuid");
d.add(72,68,"标识字段和序列（Identity columns and Sequences）","ch05.html#mapping-declaration-id-sequences");
d.add(73,68,"程序分配的标识符（Assigned Identifiers）","ch05.html#mapping-declaration-id-assigned");
d.add(74,68,"触发器实现的主键生成器（Primary keys assigned by triggers）","ch05.html#mapping-declaration-id-select");
d.add(75,63,"composite-id","ch05.html#mapping-declaration-compositeid");
d.add(76,63,"鉴别器（discriminator）","ch05.html#mapping-declaration-discriminator");
d.add(77,63,"版本（version）(可选)","ch05.html#mapping-declaration-version");
d.add(78,63,"timestamp (可选)","ch05.html#mapping-declaration-timestamp");
d.add(79,63,"property","ch05.html#mapping-declaration-property");
d.add(80,63,"多对一（many-to-one）","ch05.html#mapping-declaration-manytoone");
d.add(81,63,"一对一","ch05.html#mapping-declaration-onetoone");
d.add(82,63,"自然ID(natural-id)","ch05.html#mapping-declaration-naturalid");
d.add(83,63,"组件(component), 动态组件(dynamic-component)","ch05.html#mapping-declaration-component");
d.add(84,63,"properties","ch05.html#mapping-declaration-properties");
d.add(85,63,"子类(subclass)","ch05.html#mapping-declaration-subclass");
d.add(86,63,"连接的子类(joined-subclass)","ch05.html#mapping-declaration-joinedsubclass");
d.add(87,63,"联合子类(union-subclass)","ch05.html#mapping-declaration-unionsubclass");
d.add(88,63,"连接(join)","ch05.html#mapping-declaration-join");
d.add(89,63,"键(key)","ch05.html#mapping-declaration-key");
d.add(90,63,"字段和规则元素（column and formula elements）","ch05.html#mapping-column");
d.add(91,63,"引用(import)","ch05.html#mapping-declaration-import");
d.add(92,63,"any","ch05.html#mapping-types-anymapping");
d.add(93,62,"Hibernate 的类型","ch05s02.html");
d.add(94,93,"实体(Entities)和值(values)","ch05s02.html#mapping-types-entitiesvalues");
d.add(95,93,"基本值类型","ch05s02.html#mapping-types-basictypes");
d.add(96,93,"自定义值类型","ch05s02.html#mapping-types-custom");
d.add(97,62,"多次映射同一个类","ch05s03.html");
d.add(98,62,"SQL中引号包围的标识符","ch05s04.html");
d.add(99,62,"其他元数据(Metadata)","ch05s05.html");
d.add(100,99,"使用 XDoclet 标记","ch05s05.html#mapping-xdoclet");
d.add(101,99,"使用 JDK 5.0 的注解(Annotation)","ch05s05.html#mapping-annotations");
d.add(102,62,"数据库生成属性（Generated Properties）","ch05s06.html");
d.add(103,62,"辅助数据库对象(Auxiliary Database Objects)","ch05s07.html");
d.add(104,2,"集合类(Collections)映射","ch06.html");
d.add(105,104,"持久化集合类(Persistent collections)","ch06.html#collections-persistent");
d.add(106,104,"集合映射（ Collection mappings ）","ch06s02.html");
d.add(107,106,"集合外键(Collection foreign keys)","ch06s02.html#collections-foreignkeys");
d.add(108,106,"集合元素（Collection elements）","ch06s02.html#collections-elements");
d.add(109,106,"索引集合类(Indexed collections)","ch06s02.html#collections-indexed");
d.add(110,106,"值集合于多对多关联(Collections of values and many-to-many associations)","ch06s02.html#collections-ofvalues");
d.add(111,106,"一对多关联（One-to-many Associations）","ch06s02.html#collections-onetomany");
d.add(112,104,"高级集合映射（Advanced collection mappings）","ch06s03.html");
d.add(113,112,"有序集合（Sorted collections）","ch06s03.html#collections-sorted");
d.add(114,112,"双向关联（Bidirectional associations）","ch06s03.html#collections-bidirectional");
d.add(115,112,"双向关联，涉及有序集合类","ch06s03.html#collections-indexedbidirectional");
d.add(116,112,"三重关联（Ternary associations）","ch06s03.html#collections-ternary");
d.add(117,112,"使用&l（Tidbag&gas","ch06s03.html#collections-idbag");
d.add(118,104,"集合例子（Collection example）","ch06s04.html");
d.add(119,2,"关联关系映射","ch07.html");
d.add(120,119,"介绍","ch07.html#assoc-intro");
d.add(121,119,"单向关联（Unidirectional associations）","ch07s02.html");
d.add(122,121,"多对一(many to one)","ch07s02.html#assoc-unidirectional-m21");
d.add(123,121,"一对一（one to one）","ch07s02.html#assoc-unidirectional-121");
d.add(124,121,"一对多（one to many）","ch07s02.html#assoc-unidirectional-12m");
d.add(125,119,"使用连接表的单向关联（Unidirectional associations with join tables）","ch07s03.html");
d.add(126,125,"一对多(one to many)","ch07s03.html#assoc-unidirectional-join-12m");
d.add(127,125,"多对一（many to one）","ch07s03.html#assoc-unidirectional-join-m21");
d.add(128,125,"一对一（one to one）","ch07s03.html#assoc-unidirectional-join-121");
d.add(129,125,"多对多（many to many）","ch07s03.html#assoc-unidirectional-join-m2m");
d.add(130,119,"双向关联（Bidirectional associations）","ch07s04.html");
d.add(131,130,"一对多（one to many) / 多对一（many to one）","ch07s04.html#assoc-bidirectional-m21");
d.add(132,130,"一对一（one to one）","ch07s04.html#assoc-bidirectional-121");
d.add(133,119,"使用连接表的双向关联（Bidirectional associations with join tables）","ch07s05.html");
d.add(134,133,"一对多（one to many） /多对一（ many to one）","ch07s05.html#assoc-bidirectional-join-12m");
d.add(135,133,"一对一（one to one）","ch07s05.html#assoc-bidirectional-join-121");
d.add(136,133,"多对多（many to many）","ch07s05.html#assoc-bidirectional-join-m2m");
d.add(137,119,"更复杂的关联映射","ch07s06.html");
d.add(138,2,"组件（Component）映射","ch08.html");
d.add(139,138,"依赖对象（Dependent objects）","ch08.html#components-dependentobjects");
d.add(140,138,"在集合中出现的依赖对象 (Collections of dependent objects)","ch08s02.html");
d.add(141,138,"组件作为Map的索引（Components as Map indices ）","ch08s03.html");
d.add(142,138,"组件作为联合标识符(Components as composite identifiers)","ch08s04.html");
d.add(143,138,"动态组件 （Dynamic components）","ch08s05.html");
d.add(144,2,"继承映射(Inheritance Mappings)","ch09.html");
d.add(145,144,"三种策略","ch09.html#inheritance-strategies");
d.add(146,145,"每个类分层结构一张表(Table per class hierarchy)","ch09.html#inheritance-tableperclass");
d.add(147,145,"每个子类一张表(Table per subclass)","ch09.html#inheritance-tablepersubclass");
d.add(148,145,"每个子类一张表(Table per subclass)，使用辨别标志(Discriminator)","ch09.html#inheritance-tablepersubclass-discriminator");
d.add(149,145,"混合使用“每个类分层结构一张表”和“每个子类一张表”","ch09.html#inheritance-mixing-tableperclass-tablepersubclass");
d.add(150,145,"每个具体类一张表(Table per concrete class)","ch09.html#inheritance-tableperconcrete");
d.add(151,145,"Table per concrete class, using implicit polymorphism","ch09.html#inheritance-tableperconcreate-polymorphism");
d.add(152,145,"隐式多态和其他继承映射混合使用","ch09.html#inheritace-mixingpolymorphism");
d.add(153,144,"限制","ch09s02.html");
d.add(154,2,"与对象共事","ch10.html");
d.add(155,154,"Hibernate对象状态(object states)","ch10.html#objectstate-overview");
d.add(156,154,"使对象持久化","ch10s02.html");
d.add(157,154,"装载对象","ch10s03.html");
d.add(158,154,"查询","ch10s04.html");
d.add(159,158,"执行查询","ch10s04.html#objectstate-querying-executing");
d.add(160,159,"迭代式获取结果(Iterating results)","ch10s04.html#objectstate-querying-executing-iterate");
d.add(161,159,"返回元组(tuples)的查询","ch10s04.html#objectstate-querying-executing-tuples");
d.add(162,159,"标量(Scalar)结果","ch10s04.html#objectstate-querying-executing-scalar");
d.add(163,159,"绑定参数","ch10s04.html#objectstate-querying-executing-parameters");
d.add(164,159,"分页","ch10s04.html#objectstate-querying-executing-pagination");
d.add(165,159,"可滚动遍历(Scrollable iteration)","ch10s04.html#objectstate-querying-executing-scrolling");
d.add(166,159,"外置命名查询(Externalizing named queries)","ch10s04.html#objectstate-querying-executing-named");
d.add(167,158,"过滤集合","ch10s04.html#objectstate-filtering");
d.add(168,158,"条件查询(Criteria queries)","ch10s04.html#objecstate-querying-criteria");
d.add(169,158,"使用原生SQL的查询","ch10s04.html#objectstate-querying-nativesql");
d.add(170,154,"修改持久对象","ch10s05.html");
d.add(171,154,"修改脱管(Detached)对象","ch10s06.html");
d.add(172,154,"自动状态检测","ch10s07.html");
d.add(173,154,"删除持久对象","ch10s08.html");
d.add(174,154,"在两个不同数据库间复制对象","ch10s09.html");
d.add(175,154,"Session刷出(flush)","ch10s10.html");
d.add(176,154,"传播性持久化(transitive persistence)","ch10s11.html");
d.add(177,154,"使用元数据","ch10s12.html");
d.add(178,2,"事务和并发","ch11.html");
d.add(179,178,"Session和事务范围(transaction scope)","ch11.html#transactions-basics");
d.add(180,179,"操作单元(Unit of work)","ch11.html#transactions-basics-uow");
d.add(181,179,"长对话","ch11.html#transactions-basics-apptx");
d.add(182,179,"关注对象标识(Considering object identity)","ch11.html#transactions-basics-identity");
d.add(183,179,"常见问题","ch11.html#transactions-basics-issues");
d.add(184,178,"数据库事务声明","ch11s02.html");
d.add(185,184,"非托管环境","ch11s02.html#transactions-demarcation-nonmanaged");
d.add(186,184,"使用JTA","ch11s02.html#transactions-demarcation-jta");
d.add(187,184,"异常处理","ch11s02.html#transactions-demarcation-exceptions");
d.add(188,184,"事务超时","ch11s02.html#transactions-demarcation-timeout");
d.add(189,178,"乐观并发控制(Optimistic concurrency control)","ch11s03.html");
d.add(190,189,"应用程序级别的版本检查(Application version checking)","ch11s03.html#transactions-optimistic-manual");
d.add(191,189,"扩展周期的session和自动版本化","ch11s03.html#transactions-optimistic-longsession");
d.add(192,189,"脱管对象(deatched object)和自动版本化","ch11s03.html#transactions-optimistic-detached");
d.add(193,189,"定制自动版本化行为","ch11s03.html#transactions-optimistic-customizing");
d.add(194,178,"悲观锁定(Pessimistic Locking)","ch11s04.html");
d.add(195,178,"连接释放模式(Connection Release Modes)","ch11s05.html");
d.add(196,2,"拦截器与事件(Interceptors and events)","ch12.html");
d.add(197,196,"拦截器(Interceptors)","ch12.html#objectstate-interceptors");
d.add(198,196,"事件系统(Event system)","ch12s02.html");
d.add(199,196,"Hibernate的声明式安全机制","ch12s03.html");
d.add(200,2,"批量处理（Batch processing）","ch13.html");
d.add(201,200,"批量插入（Batch inserts）","ch13.html#batch-inserts");
d.add(202,200,"批量更新（Batch updates）","ch13s02.html");
d.add(203,200,"StatelessSession (无状态session)接口","ch13s03.html");
d.add(204,200,"DML(数据操作语言)风格的操作(DML-style operations)","ch13s04.html");
d.add(205,2,"HQL: Hibernate查询语言","ch14.html");
d.add(206,205,"大小写敏感性问题","ch14.html#queryhql-casesensitivity");
d.add(207,205,"from子句","ch14s02.html");
d.add(208,205,"关联(Association)与连接(Join)","ch14s03.html");
d.add(209,205,"join 语法的形式","ch14s04.html");
d.add(210,205,"select子句","ch14s05.html");
d.add(211,205,"聚集函数","ch14s06.html");
d.add(212,205,"多态查询","ch14s07.html");
d.add(213,205,"where子句","ch14s08.html");
d.add(214,205,"表达式","ch14s09.html");
d.add(215,205,"order by子句","ch14s10.html");
d.add(216,205,"group by子句","ch14s11.html");
d.add(217,205,"子查询","ch14s12.html");
d.add(218,205,"HQL示例","ch14s13.html");
d.add(219,205,"批量的UPDATE和DELETE","ch14s14.html");
d.add(220,205,"小技巧 &amTE 小窍门","ch14s15.html");
d.add(221,2,"条件查询(Criteria Queries)","ch15.html");
d.add(222,221,"创建一个Criteria 实例","ch15.html#querycriteria-creating");
d.add(223,221,"限制结果集内容","ch15s02.html");
d.add(224,221,"结果集排序","ch15s03.html");
d.add(225,221,"关联","ch15s04.html");
d.add(226,221,"动态关联抓取","ch15s05.html");
d.add(227,221,"查询示例","ch15s06.html");
d.add(228,221,"投影(Projections)、聚合（aggregation）和分组（grouping）","ch15s07.html");
d.add(229,221,"离线(detached)查询和子查询","ch15s08.html");
d.add(230,221,"根据自然标识查询(Queries by natural identifier)","ch15s09.html");
d.add(231,2,"Native SQL查询","ch16.html");
d.add(232,231,"使用SQLQuery","ch16.html#querysql-creating");
d.add(233,232,"标量查询（Scalar queries）","ch16.html#id530151");
d.add(234,232,"实体查询(Entity queries)","ch16.html#id530325");
d.add(235,232,"处理关联和集合类(Handling associations and collections)","ch16.html#id530441");
d.add(236,232,"返回多个实体(Returning multiple entities)","ch16.html#id530542");
d.add(237,236,"别名和属性引用(Alias and property references)","ch16.html#querysql-aliasreferences");
d.add(238,232,"返回非受管实体(Returning non-managed entities)","ch16.html#id531006");
d.add(239,232,"处理继承（Handling inheritance）","ch16.html#id531071");
d.add(240,232,"参数（Parameters）","ch16.html#id531088");
d.add(241,231,"命名SQL查询","ch16s02.html");
d.add(242,241,"使用return-property来明确地指定字段/别名","ch16s02.html#propertyresults");
d.add(243,241,"使用存储过程来查询","ch16s02.html#sp_query");
d.add(244,243,"使用存储过程的规则和限制","ch16s02.html#querysql-limits-storedprocedures");
d.add(245,231,"定制SQL用来create，update和delete","ch16s03.html");
d.add(246,231,"定制装载SQL","ch16s04.html");
d.add(247,2,"过滤数据","ch17.html");
d.add(248,247,"Hibernate 过滤器(filters)","ch17.html#objectstate-filters");
d.add(249,2,"XML映射","ch18.html");
d.add(250,249,"用XML数据进行工作","ch18.html#xml-intro");
d.add(251,250,"指定同时映射XML和类","ch18.html#xml-intro-mapping");
d.add(252,250,"只定义XML映射","ch18.html#xml-onlyxml");
d.add(253,249,"XML映射元数据","ch18s02.html");
d.add(254,249,"操作XML数据","ch18s03.html");
d.add(255,2,"提升性能","ch19.html");
d.add(256,255,"抓取策略(Fetching strategies)","ch19.html#performance-fetching");
d.add(257,256,"操作延迟加载的关联","ch19.html#performance-fetching-lazy");
d.add(258,256,"调整抓取策略（Tuning fetch strategies）","ch19.html#performance-fetching-custom");
d.add(259,256,"单端关联代理（Single-ended association proxies）","ch19.html#performance-fetching-proxies");
d.add(260,256,"实例化集合和代理（Initializing collections and proxies）","ch19.html#performance-fetching-initialization");
d.add(261,256,"使用批量抓取（Using batch fetching）","ch19.html#performance-fetching-batch");
d.add(262,256,"使用子查询抓取（Using subselect fetching）","ch19.html#performance-fetching-subselect");
d.add(263,256,"使用延迟属性抓取（Using lazy property fetching）","ch19.html#performance-fetching-lazyproperties");
d.add(264,255,"二级缓存（The Second Level Cache）","ch19s02.html");
d.add(265,264,"缓存映射（Cache mappings）","ch19s02.html#performance-cache-mapping");
d.add(266,264,"策略：只读缓存（Strategy: read only）","ch19s02.html#performance-cache-readonly");
d.add(267,264,"策略:读/写缓存（Strategy: read/write）","ch19s02.html#performance-cache-readwrite");
d.add(268,264,"策略:非严格读/写缓存（Strategy: nonstrict read/write）","ch19s02.html#performance-cache-nonstrict");
d.add(269,264,"策略:事务缓存（transactional）","ch19s02.html#performance-cache-transactional");
d.add(270,255,"管理缓存（Managing the caches）","ch19s03.html");
d.add(271,255,"查询缓存（The Query Cache）","ch19s04.html");
d.add(272,255,"理解集合性能（Understanding Collection performance）","ch19s05.html");
d.add(273,272,"分类（Taxonomy）","ch19s05.html#performance-collections-taxonomy");
d.add(274,272,"Lists, maps 和sets用于更新效率最高","ch19s05.html#performance-collections-mostefficientupdate");
d.add(275,272,"Bag和list是反向集合类中效率最高的","ch19s05.html#performance-collections-mostefficentinverse");
d.add(276,272,"一次性删除（One shot delete）","ch19s05.html#performance-collections-oneshotdelete");
d.add(277,255,"监测性能（Monitoring performance）","ch19s06.html");
d.add(278,277,"监测SessionFactory","ch19s06.html#performance-monitoring-sf");
d.add(279,277,"数据记录（Metrics）","ch19s06.html#performance-monitoring-metrics");
d.add(280,2,"工具箱指南","ch20.html");
d.add(281,280,"Schema自动生成（Automatic schema generation）","ch20.html#toolsetguide-s1");
d.add(282,281,"对schema定制化(Customizing the schema)","ch20.html#toolsetguide-s1-2");
d.add(283,281,"运行该工具","ch20.html#toolsetguide-s1-3");
d.add(284,281,"属性(Properties)","ch20.html#toolsetguide-s1-4");
d.add(285,281,"使用Ant(Using Ant)","ch20.html#toolsetguide-s1-5");
d.add(286,281,"对schema的增量更新(Incremental schema updates)","ch20.html#toolsetguide-s1-6");
d.add(287,281,"用Ant来增量更新schema(Using Ant for incremental schema updates)","ch20.html#toolsetguide-s1-7");
d.add(288,281,"Schema 校验","ch20.html#toolsetguide-s1-8");
d.add(289,281,"使用Ant进行schema校验","ch20.html#toolsetguide-s1-9");
d.add(290,2,"示例：父子关系(Parent Child Relationships)","ch21.html");
d.add(291,290,"关于collections需要注意的一点","ch21.html#example-parentchild-collections");
d.add(292,290,"双向的一对多关系(Bidirectional one-to-many)","ch21s02.html");
d.add(293,290,"级联生命周期（Cascading lifecycle）","ch21s03.html");
d.add(294,290,"级联与未保存值（Cascades and unsaved-value）","ch21s04.html");
d.add(295,290,"结论","ch21s05.html");
d.add(296,2,"示例：Weblog 应用程序","ch22.html");
d.add(297,296,"持久化类","ch22.html#example-weblog-classes");
d.add(298,296,"Hibernate 映射","ch22s02.html");
d.add(299,296,"Hibernate 代码","ch22s03.html");
d.add(300,2,"示例：复杂映射实例","ch23.html");
d.add(301,300,"Employer（雇主)/Employee(雇员)","ch23.html#example-mappings-emp");
d.add(302,300,"Author(作家)/Work(作品)","ch23s02.html");
d.add(303,300,"Customer(客户)/Order(订单)/Product(产品)","ch23s03.html");
d.add(304,300,"杂例","ch23s04.html");
d.add(305,304,"Typed","ch23s04.html#example-mappings-typed-onetone");
d.add(306,304,"Composite key example","ch23s04.html#example-mappings-composite-key");
d.add(307,304,"共有组合键属性的多对多(Many-to-many with shared composite key attribute)","ch23s04.html#example-mappings-composite-key-manytomany");
d.add(308,304,"Content based discrimination","ch23s04.html#example-mappings-content-discrimination");
d.add(309,304,"Associations on alternate keys","ch23s04.html#example-mappings-association-alternatekeys");
d.add(310,2,"最佳实践(Best Practices)","ch24.html");

document.write(d);
//-->
</script>
</div>
<p \><hr size="1" \>
<font class="dtree">Generated by <a target="_blank" href="http://www.chmeditor.com">CHM Editor</a></font><br><br>
</body>
</html>
