<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration>

    <!-- 将日志信息输出到控制台 -->
    <appender name="ConsoleAppender" class="org.apache.log4j.ConsoleAppender">
        <!-- 设置日志输出的样式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <!-- 设置日志输出的格式 -->
            <param name="ConversionPattern"
                   value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n"/>
        </layout>
        <!--过滤器设置输出的级别 -->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <!-- 设置日志输出的最小级别 -->
            <param name="levelMin" value="ERROR"/>
            <!-- 设置日志输出的最大级别 -->
            <param name="levelMax" value="ERROR"/>
            <!-- 设置日志输出的xxx，默认是false -->
            <param name="AcceptOnMatch" value="true"/>
        </filter>
    </appender>
    <!-- 输出日志到文件 -->
    <appender name="fileAppender" class="org.apache.log4j.RollingFileAppender">
        <!-- 输出文件全路径名 -->
        <param name="File" value="${catalina.home}/../idp/logs/sharehoo/sharehoo-log4j.log"/>
        <!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件 -->
        <param name="Append" value="false"/>
        <param name="Threshold" value="ERROR"/>
        <!--是否启用缓存，默认false -->
        <param name="BufferedIO" value="false"/>
        <!--缓存大小，依赖上一个参数(bufferedIO), 默认缓存大小8K -->
        <param name="BufferSize" value="512"/>
        <!-- 日志输出格式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%p][%d{yyyy-MM-dd HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
    </appender>


    <!-- 输出日志到文件，当文件大小达到一定阈值时，自动备份 -->
    <!-- FileAppender子类 -->
    <appender name="rollingAppender" class="org.apache.log4j.RollingFileAppender">
        <!-- 日志文件全路径名 -->
        <param name="File" value="${catalina.home}/../idp/logs/sharehoo/sharehoo-log4j.log"/>
        <param name="Threshold" value="ERROR"/>
        <!--是否在已存在的文件追加写：默认时true，若为false则每次启动都会删除并重新新建文件 -->
        <param name="Append" value="true"/>
        <!-- 设置当日志文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB，默认值是：10MB -->
        <param name="MaxFileSize" value="10MB"/>
        <!-- 保存备份日志的最大个数，默认值是：1 -->
        <param name="MaxBackupIndex" value="5"/>
        <!-- 设置日志输出的样式 -->
        <!-- 日志输出格式 -->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n"/>
        </layout>
    </appender>


    <!-- 日志输出到文件，可以配置多久产生一个新的日志信息文件 -->
    <appender name="dailyRollingAppender" class="org.apache.log4j.DailyRollingFileAppender">
        <!--文件文件全路径名-->
        <param name="File" value="${catalina.home}/../idp/logs/sharehoo/sharehoo-log4j.log"/>
        <param name="Threshold" value="ERROR"/>
        <param name="Append" value="true"/>
        <!--设置日志备份频率，默认：为每天一个日志文件-->
        <param name="DatePattern" value="'.'yyyy-MM-dd'.log'"/>

        <!--每分钟一个备份-->
        <param name="DatePattern" value="'.'yyyy-MM-dd-HH-mm'.log'" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%p][%d{HH:mm:ss SSS}][%c]-[%m]%n"/>
        </layout>
    </appender>


    <!-- 注意： 1：当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制 2：logger中的name非常重要，它代表记录器的包的形式，有一定的包含关系，试验表明
        2-1：当定义的logger的name同名时，只有最后的那一个才能正确的打印日志 2-2：当对应的logger含有包含关系时，比如：name=test.log4j.test8
        和 name=test.log4j.test8.UseLog4j，则2-1的情况是一样的 2-3：logger的name表示所有的包含在此名的所有记录器都遵循同样的配置，name的值中的包含关系是指记录器的名称哟！注意啦！
        3：logger中定义的level和appender中的filter定义的level的区间取交集 4：如果appender中的filter定义的
        levelMin > levelMax ，则打印不出日志信息 -->

    <!-- 根logger的设置 -->
    <!-- 根logger的设置，若代码中未找到指定的logger，则会根据继承机制，使用根logger-->
    <root>
        <appender-ref ref="ConsoleAppender"/>
        <appender-ref ref="fileAppender"/>
        <appender-ref ref="rollingAppender"/>
        <appender-ref ref="dailyRollingAppender"/>
    </root>

</log4j:configuration>